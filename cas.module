<?php

/**
 * @file
 * Enables users to authenticate via a Central Authentication Service (CAS)
 * Cas will currently work if the auto registration is turned on and will
 * create user accounts automatically.
 */

define('CAS_NO_VERIFY', 'none');
define('CAS_CA_VERIFY', 'ca_verify');
define('CAS_NO_LINK', 0);
define('CAS_ADD_LINK', 1);
define('CAS_MAKE_DEFAULT', 2);
define('CAS_LOGIN_INVITE_DEFAULT', 'Log in via single sign-on (CAS)');
define('CAS_LOGIN_DRUPAL_INVITE_DEFAULT', 'Log in locally (no single sign-on)');
define('CAS_LOGIN_REDIR_MESSAGE', 'You will be redirected to the secure cas login page');
define('CAS_EXCLUDE', 'services/*');
define('CAS_AUTHMAP_EXTERNAL', 0);  // Use external authmap entries for cas
define('CAS_AUTHMAP_INTERNAL', 1);  // Use drupal as the internal user.


/**
 * Invokes hook_auth_transform() in every module.
 *
 * Other modules may need to transform the results of phpCAS::getUser() into a Drupal username
 * (i.e. phpCAS::getUser() is not guaranteed to return the same username that the user typed in
 *       or the Drupal username might be username@cas or something and we need to know it before we filter)
 *
 * We cannot use hook_insert or any user hooks, because they fire way too late.
 * We cannot use module_invoke_all(), because the argument needs to be passed by reference.
 *
 * @param $cas_user
 *   The cas reply string to transform into a drupal username
 */
function cas_invoke_auth_transform(&$cas_name) {
  foreach (module_implements('auth_transform') as $module) {
    $function = $module . '_auth_transform';
    if (function_exists($function)) {
      $function('cas', $cas_name);
    }
  }
}

/**
 * Invokes hook_auth_filter() in every module.
 *
 * We cannot use module_invoke_all() for this,
 * because we want to break out as soon as one fails.
 *
 * @param $cas_user
 *   The transformed $cas_name to filter
 *
 * @return
 *   TRUE if no module implementing this hook denied access
 *   FALSE if any module returned FALSE
 */
function cas_invoke_auth_filter($cas_name) {
  foreach (module_implements('auth_filter') as $module) {
    $function = $module . '_auth_filter';
    if (function_exists($function)) {

      if (($return = $function('cas', $cas_name)) === FALSE) {
        return FALSE;
      }
    }
  }
  return TRUE;
}

/**
 * Implements hook_init().
 *
 * Traps a page load to see if authentication is required.
 */
function cas_init() {
  _cas_single_sign_out_check();
  cas_login_check();
}

/**
 * Access function used to make sure cas menu doesn't show up when
 * Not needed.
 *
 * @return boolean
 */
function cas_menu_check() {
  global $user;
  $access = FALSE;
  if ($user->uid == 0) $access = TRUE;
  if (strpos($_GET['q'], 'admin/structure/menu') !== FALSE) {
    $access = TRUE;
  }
  return $access;
}

/**
 * Check to see if we need to display the logout menu.
 *
 * @return boolean
 */
function cas_menu_logout_check() {
  global $user;
  $access = FALSE;
  if ($user->uid) $access = TRUE;
  return $access;
}

/**
 * Checks to see if the user needs to be logged in
 *
 */
function cas_login_check() {
  global $user;
  if ($user->uid) {
    //Don't Login  because we already are
    return;
  }

  // Determine whether we should check for long
  $cas_check_first = _cas_allow_check_for_login();

  $cas_force_login = _cas_force_login();

  if ($cas_force_login || $cas_check_first) {

    // Gets path to CAS library, performs a basic sanity check.
    if (module_exists('libraries')) {
      $filename = libraries_get_path('CAS');
    }
    else {
      $filename = variable_get('cas_library_dir', 'CAS');
    }
    if ($filename != '')
      $filename .= '/';
    $filename .= 'CAS.php';
    include_once($filename);

    if (!class_exists('phpCAS')) {
      drupal_set_message(t('Error loading CAS library using %filename', array('%filename' => $filename)), 'error');
      return;
    }

    // Variable set
    $cas_user_register = variable_get('cas_user_register', 1);
    $cas_authmap       = variable_get('cas_authmap', CAS_AUTHMAP_EXTERNAL);
    $server_version    = (string)variable_get('cas_version', '2.0');
    $server_cas_server = (string)variable_get('cas_server', 'sso-cas.univ-rennes1.fr');
    $server_port       = (int)variable_get('cas_port', '443');
    $server_uri        = (string)variable_get('cas_uri', '');
    $cas_cert_verify   = (string)variable_get('cas_cert_verify', CAS_NO_VERIFY);
    $cas_cert          = (string)variable_get('cas_cert', '');
    if ( ($debugFile = variable_get("cas_debugfile", "")) != "" ) {
      phpCAS::setDebug($debugFile);
    }
    // Start a drupal session
    drupal_session_start();
    $start_session = (boolean)FALSE;
    cas_save_page();
    _cas_single_sign_out_save_ticket();  // We use this later for CAS 3 logoutRequests
    if ( variable_get("cas_proxy", 0) ) {
      phpCAS::proxy($server_version, $server_cas_server, $server_port, $server_uri, $start_session);
      $casPGTStoragePath = variable_get("cas_pgtpath", "");
      if ( $casPGTStoragePath != "" ) {
        $casPGTFormat = variable_get("cas_pgtformat", "plain");
        phpCAS::setPGTStorageFile($casPGTFormat, $casPGTStoragePath);
      }
    }
    else {
      phpCAS::client($server_version, $server_cas_server, $server_port, $server_uri, $start_session);
    }
    // force CAS authentication
    switch ($cas_cert_verify) {
      case CAS_NO_VERIFY:
        phpCAS::setNoCasServerValidation();
        break;
      case CAS_CA_VERIFY:
        phpCAS::setCasServerCACert($cas_cert);
        break;
    }

    // We're going to try phpCAS auth test
    if (!$cas_force_login) {
      $logged_in = phpCAS::checkAuthentication();
      // Set the login tested cookie
      setcookie('cas_login_checked', 'true');

      // We're done cause we're not logged in.
      if (!$logged_in) return;

    }
    else {
      phpCAS::forceAuthentication();
    }

    $cas_name = phpCAS::getUser();

    /*
     * Invoke hook_auth_transform($op, &$username)
     *
     * Allow other modules to change the login name
     * eg. if phpCAS::getUser() returns a string like it:johndoe:10.10.1.2:200805064255
     * eg. if your cas users in Drupal need to be johndoe@cas
     *
     * Note: this transformation needs to happen before we check for blocked users.
     */
    cas_invoke_auth_transform($cas_name);

    /*
     * Invoke hook_auth_filter($op, &$username)
     *
     * Allow other modules to filter out some cas logins
     * eg. if you want to use cas authentication but only allow SOME people in
     * eg. if you want to filter out people without LDAP home directories
     */
    if (cas_invoke_auth_filter($cas_name) === FALSE) {
      drupal_set_message(t('The user account %name is not available on this site.', array('%name' => $cas_name)), 'error');
      return;
    }

    // blocked user check

    if (($cas_authmap == CAS_AUTHMAP_INTERNAL) && user_is_blocked($cas_name)) {
      // blocked in user administration
      drupal_set_message(t('The username %name has been blocked.', array('%name' => $cas_name)), 'error');
      return;
    }
    // this is because users can change their name.
    if (($cas_authmap == CAS_AUTHMAP_EXTERNAL) && _cas_external_user_is_blocked($cas_name)) {
      // blocked in user administration
      drupal_set_message(t('The username %name has been blocked.', array('%name' => $cas_name)), 'error');
      return;
    }

    if (drupal_is_denied('user', $cas_name)) {
      // denied by access controls
      drupal_set_message(t('The name %name is a reserved username.', array('%name' => $cas_name)), 'error');
      return;
    }

    // try to log into Drupal
    if ($cas_authmap == CAS_AUTHMAP_INTERNAL) {
      // users are coming from Drupal; no need to use the external_load and the authmap
      $account = user_load_by_name($cas_name);
    }
    else {
      // users are external; use authmap table for associating external users
      $uid = db_query("SELECT uid FROM {cas_user} WHERE cas_name = :cas_name", array(':cas_name' => $cas_name))->fetchField();
      if ($uid) {
        $account = user_load($uid);
      }
      if (empty($account) && variable_get('cas_hijack_user', 0)) {
        $account = user_load_by_name($cas_name);

        if (isset($account->uid)) {
          db_insert('cas_user')
            ->fields(array(
              'uid' => $account->uid,
              'cas_name' => $cas_name,
            ))
            ->execute();
        }
      }
    }

    // If we don't have a user register them.
    if (empty($account) || !$account->uid) {
      if ($cas_user_register == 1) {
        $account = cas_user_register($cas_name);
      }
    }

    // final check to make sure we have a good user
    if (!empty($account) && $account->uid > 0) {

    // Save single sign out information
    if (!empty($_SESSION['cas_ticket']) && variable_get('cas_signout', FALSE)) {
      _cas_single_sign_out_save_token($account);
    }

    // update the roles
    $edit = array(
      'roles' => $account->roles + cas_roles(),
    );
    $account = user_save($account, $edit);

    $edit = array();
    if (module_exists('persistent_login') && $_SESSION['cas_remember']) {
      $edit['persistent_login'] = 1;
    }
    $user = $account;
    user_login_finalize($edit);
    drupal_set_message(t(variable_get('cas_login_message', 'Logged in via CAS as %cas_username.'), array('%cas_username' => $user->name)));
    if (!empty($edit['persistent_login'])) {
      drupal_set_message(t('You will remain logged in on this computer even after you close your browser.'));
    }
    // We can't count on the menu because we're changing login states.

    cas_login_page();
    }
    // if we have a good user
    else {
      // Not sure if we should be doing this.  Perhaps some kind of session start needs to be called prior to cas
      // tests?
      //session_destroy();
      $user = drupal_anonymous_user();
      drupal_set_message(t('No account found for %cas_name.', array('%cas_name' => $cas_name)));
    }
  }
  // End if user is already logged in else
}

/**
 * Implements hook_perm().
 */
function cas_permission() {
  return array(
    'administer cas' => array(
      'title' => t('Administer CAS'),
      'description' => t('Configure cas server, redirection and other settings'),
    )
  );
}

/**
 * Implements hook_help().
 */
function cas_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t("Allows users to authenticate via a Central Authentication Service.");
  }
}

/**
 * Implements hook_menu().
 */
function cas_menu() {
  global $user;
  $items = array();
  //cas_login_check();
  $items['admin/config/people/cas'] = array(
    'title' => 'CAS settings',
    'description' => 'Configure central authentication services',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cas_admin_settings'),
    'access arguments' => array('administer cas'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'cas.admin.inc',
  );
  $items['cas'] = array(
    'path' => 'cas',
    'title' => 'CAS Login',
    'page callback' => 'cas_login_page',
    'access callback' => 'cas_menu_check',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['caslogout'] = array(
    'title' => 'CAS Logout',
    'page callback' => 'cas_logout',
    'access callback' => 'cas_menu_logout_check',
    'type' => MENU_SUGGESTED_ITEM,
  );
  return $items;
}

/**
 * Implements hook_user_load().
 *
 * Adds an associative array 'cas_names' to each user. The array keys are
 * unique authentication mapping ids, with CAS usernames as the values.
 */
function cas_user_load($users) {
  foreach (array_keys($users) as $uid) {
    $users[$uid]->cas_names = array();
  }
  $result = db_query('SELECT aid, uid, cas_name FROM {cas_user} WHERE uid IN (:uids)', array(':uids' => array_keys($users)));
  foreach ($result as $record) {
    $users[$record->uid]->cas_names[$record->aid] = $record->cas_name;
  }
}

/**
 * Implements hook_user_insert().
 *
 * When a user is created, record their CAS username if provided.
 */
function cas_user_insert(&$edit, $account, $category) {
  if (!empty($edit['cas_name'])) {
    db_insert('cas_user')
      ->fields(array(
        'cas_name' => $edit['cas_name'],
        'uid' => $account->uid,
      ))
      ->execute();
  }
}

/**
 * Implements hook_user_update().
 *
 * When a user is updated, change their CAS username if provided.
 */
function cas_user_update(&$edit, $account, $category) {
  if (!array_key_exists('cas_name', $edit)) {
    // If the cas_name key is not provided, there is nothing to do.
    return;
  }
  $cas_name = $edit['cas_name'];

  // See if the user currently has any CAS names.
  $count = count($account->cas_names);
  if ($count == 0) {
    if (!empty($cas_name)) {
      // Add a CAS username.
      db_insert('cas_user')
        ->fields(array(
          'uid' => $account->uid,
          'cas_name' => $cas_name,
        ))
        ->execute();
    }
  }
  elseif ($count == 1) {
    list($aid) = array_keys($account->cas_names);
    if (empty($cas_name)) {
      // Remove a CAS username.
      db_delete('cas_user')
        ->condition('uid', $account->uid)
        ->condition('aid', $aid)
        ->execute();
    }
    else {
      // Change a CAS username.
      db_merge('cas_user')
        ->fields(array('cas_name' => $cas_name))
        ->key(array('aid' => $aid))
        ->execute();
    }
  }
}

/**
 * Implement hook_user_delete().
 *
 * When a CAS user is deleted, we need to clean up the entry in {cas_user}.
 */
function cas_user_delete($account) {
  db_delete('cas_user')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Expandee file_exists function
 * From php.net manual page for file_exists
 */
function _cas_include_exists($filename) {
  // Check the simple case.
  if (file_exists($filename)) return TRUE;

  // Check module directory
  if (file_exists(drupal_get_path('module', 'cas') . '/' . $filename)) return TRUE;


  // Find the include path
  if (function_exists("get_include_path")) {
    $include_path = get_include_path();
  }
  elseif (FALSE !== ($ip = ini_get("include_path"))) {
    $include_path = $ip;
  }

  // Walk the include path, searching for the file
  if (strpos($include_path, PATH_SEPARATOR) !== FALSE) {
    $temp = explode(PATH_SEPARATOR, $include_path);
    for ($n = 0; $n < count($temp); $n++) {
      if (file_exists(rtrim($temp[$n], '/') . '/' . $filename)) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Saves the page that the user was on when login was requested or required
 */
function cas_save_page() {
  if (!empty($_SESSION['cas_goto'])) {
    if (arg(0) == 'cas') {
      //we're were destined to the CAS login page, so set
      //the page to the referrer.
      $_SESSION['cas_goto'] = $_SERVER['HTTP_REFERER'];
    }
    else {
      //We're destined for another page, so save the group.
      $_SESSION['cas_goto'] = $_GET['q'];
    }
  }
}

/**
 * Redirects to appropriate page based on user settings.
 */
function cas_login_page() {
  global $user;
  $destination = variable_get('site_frontpage', 'node');
  // If it is the user's first CAS login and initial login redirection is enabled, go to the set page
  if (!empty($_SESSION['cas_first_login']) && (variable_get('cas_first_login', 0) == 1)) {
    $destination = variable_get('cas_first_login_destination', '');
    unset($_SESSION['cas_first_login']);
  }
  elseif (!empty($_REQUEST['destination'])) {
    $destination = $_REQUEST['destination'];
  }
  elseif (!empty($_SESSION['cas_goto'])) {
    $destination = $_SESSION['cas_goto'];
  }
  unset($_SESSION['cas_goto']);

  // Change the user/login and user/register urls to the users current page.
  if ($destination == 'user/login' || $destination == 'user/register') {
    $destination = 'user/' . $user->uid;
  }
  drupal_goto($destination);
  // this should never happen.
  $output .= t("Cas page... you should never get here");
  return $output;
}

/**
 * Logs a user out of drupal and then out of cas
 */
function cas_logout() {
  global $user, $base_url;

  watchdog('user', 'Session closed for %name.', array('%name' => $user->name));


  // Destroy the current session:
  module_invoke_all('user_logout', $user);
  session_destroy();

  // We have to use $GLOBALS to unset a global variable:
  $user   = user_load(0);

  $port   = variable_get('cas_port', '443');
  $server = variable_get('cas_server', 'cas');
  $uri    = variable_get('cas_uri', '');

  // Begin constructing logout destination
  $logout_destination = 'https://' . $server;
  // Add abnormal port
  if ($port != '443') {
    $logout_destination .= ':' . $port;
  }
  // Add logout
  if ($uri) $logout_destination .= '/' . trim($uri, '/');
  $logout_destination .= '/logout';

  // Add destination override so that a destination can be specified on the logout link
  // e.g. caslogout?desination=http://foo.bar.com/foobar
  // do not accept caslogout as a valid destination, since that may cause a redirect loop
  $destination = preg_replace("/(destination=|caslogout)/", "", drupal_get_destination());

  // If there was no override and admin has set and enabled a logout destination, look for it
  if (empty($destination) && variable_get('cas_logout_redirect', 0)) {
    $destination = variable_get('cas_logout_destination', '');
    // redirecti is enabled but no url is given - default to baseurl
    if (empty($destination)) {
      $destination = $base_url;
    }
  }

  //Make it an absolute url.  This will also convert <front> to the front page.
  if ($destination) $destination = url($destination, array('absolute' => TRUE));

  // Add the log out destination if we have one
  // The three variables are a hack because cas server implementations don't seem to be consistent with
  // its use.
  if ($destination) {
    $logout_destination .= '?destination=' . $destination . '&service=' . $destination . '&url=' . $destination;
  }

  // Remove our original destination from the request array so that it won't cause
  // drupal_goto to re-write the url.
  unset($_REQUEST['destination']);

  // Go to the constructed logout destination
  drupal_goto($logout_destination);
}


function cas_login_form($form_state) {
  $form['submit'] = array('#type' => 'submit', '#value' => t('Log in via CAS'));
  if (module_exists('persistent_login') && variable_get('cas_allow_rememberme', 0)) {
    $form['remember'] = array(
      '#type' => 'checkbox',
      '#title' => t('Remember me'),
      '#default_value' => 0,
    );
  }
  return $form;
}

function cas_login_form_submit($form, &$form_state) {
  if ($form_state['values']['remember']) {
    $_SESSION['cas_remember'] = 1;
  }
  $form_state['redirect'] = 'cas';
}


function _cas_allow_check_for_login() {

    // Determine whether we should check for long
  $cas_check_first = variable_get('cas_check_first', 1);
  if (!$cas_check_first) {
    return FALSE;
  }

  // Check to see if we already have.
  if (!empty($_COOKIE['cas_login_checked'])) {
    return FALSE;
  }

  // Check to see if we've got a search bot.
  $crawlers = array(
    'Google',
    'msnbot',
    'Rambler',
    'Yahoo',
    'AbachoBOT',
    'accoona',
    'AcoiRobot',
    'ASPSeek',
    'CrocCrawler',
    'Dumbot',
    'FAST-WebCrawler',
    'GeonaBot',
    'Gigabot',
    'Lycos',
    'MSRBOT',
    'Scooter',
    'AltaVista',
    'IDBot',
    'eStyle',
    'Scrubby',
    );
  // Return on the first find.
  foreach ($crawlers as $c) {
    if (stripos($_SERVER['HTTP_USER_AGENT'], $c) !== FALSE) {
      return FALSE;
    }
  }

  // No need if we're on the cas login page.
  list($arg0) = explode('/', $_GET['q']);
  // Don't even do the test if we're hitting the cas page
  if ($arg0 == "cas") {
    return FALSE;
  }

   // cron
  if (stristr($_SERVER['SCRIPT_FILENAME'], 'xmlrpc.php')) {
    return FALSE;
  }

  // XMLRPC
  if (stristr($_SERVER['SCRIPT_FILENAME'], 'cron.php')) {
    return FALSE;
  }


 // Drush
  if (stristr($_SERVER['SCRIPT_FILENAME'], 'drush')) {
    return FALSE;
  }
  // Drush
  if (!empty($_SERVER['argv'][0]) && stristr($_SERVER['argv'][0], 'drush')) {
    return FALSE;
  }

  $pages = variable_get('cas_exclude', CAS_EXCLUDE);

  // Test against exclude pages.
  if ($pages) {
    $path       = drupal_get_path_alias($_GET['q']);
    $regexp     = '/^(' . preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1' . variable_get('site_frontpage', 'node') . '\2'), preg_quote($pages, '/')) . ')$/';
    $path_match = preg_match($regexp, $path);

    // Alter the default
    if ($path_match) {
      return FALSE;
    }
  }

  return $cas_check_first;
}

/**
 * Determines whether cas login should be enforced for this page load.
 * This is done based on the redirection settings for this module.
 */
function _cas_force_login() {

  list($arg0) = explode('/', $_GET['q']);
  // Don't even do the test if we're hitting the cas page
  if ($arg0 == "cas") {
    return TRUE;
  }

  // cron
  if (stristr($_SERVER['SCRIPT_FILENAME'], 'xmlrpc.php')) {
    return FALSE;
  }

  // XMLRPC
  if (stristr($_SERVER['SCRIPT_FILENAME'], 'cron.php')) {
    return FALSE;
  }


 // Drush
  if (function_exists('drush_verify_cli') && drush_verify_cli()) {
    return FALSE;
  }

  // set the default behavior
  if (variable_get('cas_access', 0) == 1) {
    $force_login = TRUE;
  }
  else {
    $force_login = FALSE;
  }


  // Test against exclude pages.
  $pages = variable_get('cas_exclude', CAS_EXCLUDE);
  if ($pages) {
    $path       = drupal_get_path_alias($_GET['q']);
    $regexp     = '/^(' . preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1' . variable_get('site_frontpage', 'node') . '\2'), preg_quote($pages, '/')) . ')$/';
    $path_match = preg_match($regexp, $path);

    // Alter the default
    if ($path_match) {
      return FALSE;
    }
  }

  $pages = variable_get('cas_pages', '');
  // This common page matching logic used throughout drupal.
  if ($pages) {
    $path       = drupal_get_path_alias($_GET['q']);
    $regexp     = '/^(' . preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1' . variable_get('site_frontpage', 'node') . '\2'), preg_quote($pages, '/')) . ')$/';
    $path_match = preg_match($regexp, $path);

    // Alter the default
    if ($path_match) {
      if ($force_login) $force_login = FALSE;
      else $force_login = TRUE;
    }
  }

  return $force_login;
}
/**
 * Implements hook_form_alter().
 *
 * Overrides specific from settings based on user policy.
 */
function cas_form_alter(&$form, &$form_state, $form_id) {

  //drupal_set_message($form_id.'<pre>'.print_r($form,1).'</pre>');
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      if (variable_get('cas_login_form', CAS_ADD_LINK) == CAS_ADD_LINK || variable_get('cas_login_form', CAS_MAKE_DEFAULT) == CAS_MAKE_DEFAULT) {
        $form['#attached']['css'][] = drupal_get_path('module', 'cas') . '/cas.css';
        $form['#attached']['js'][] = drupal_get_path('module', 'cas') . '/cas.js';

        if (!empty($form_state['input']['cas_identifier']) && $form_state['input']['cas_identifier'] == 1) {
          $form['name']['#required'] = FALSE;
          $form['pass']['#required'] = FALSE;
          unset($form['#validate']);
          $form['#submit'] = array('cas_login_submit');
        }

        $items = array();
        $items[] = array(
          'data' => l(t(variable_get('cas_login_invite', CAS_LOGIN_INVITE_DEFAULT)), '#'),
          'class' => array('cas-link'),
        );

        $items[] = array(
          'data' => l(t(variable_get('cas_login_drupal_invite', CAS_LOGIN_DRUPAL_INVITE_DEFAULT)), '#'),
          'class' => array('uncas-link'),
        );

        $form['cas_links'] = array(
          '#theme' => 'item_list',
          '#items' => $items,
          '#attributes' => array('class' => array('cas-links')),
          '#weight' => 1,
        );

        $form['links']['#weight'] = 2;

        $form['cas_identifier'] = array(
          '#type' => 'checkbox',
          '#title' => t('Log in using CAS'),
          '#default_value' => (variable_get('cas_login_form', CAS_NO_LINK) == CAS_ADD_LINK ? 0 : 1),
          '#weight' => -1,
          '#description' => t(variable_get('cas_login_redir_message', CAS_LOGIN_REDIR_MESSAGE)),
        );
        $form['cas.return_to'] = array('#type' => 'hidden', '#value' => 'cas');
      }
      break;


    case 'user_profile_form':
      //make the email field hidden and force the value to the default.
      if (variable_get('cas_hide_email', 0) && cas_is_external_user()) {
        if (variable_get('cas_domain', '')) {
          $form['account']['mail']['#type'] = 'hidden';
          $form['account']['mail']['#value'] = $form['account']['mail']['#default_value'];
          if (!$form['account']['mail']['#default_value']) {
            $form['account']['mail']['#value'] = $form['account']['name']['#default_value'] . '@' . variable_get('cas_domain', '');
          }
        }
      }

      //Remove the password fields from the form.
      if (variable_get('cas_hide_password', 0) && cas_is_external_user()) {
        unset($form['account']['pass']);

        // Also remove requirement to validate your current password before
        // changing your e-mail address.
        unset($form['account']['current_pass']);
        unset($form['account']['current_pass_required_values']);
        $form['#validate'] = array_diff($form['#validate'], array('user_validate_current_pass'));
      }

      break;

    case 'user_pass':
      if (!user_access('administer users') && variable_get('cas_changePasswordURL', '') != '') {
        drupal_goto(variable_get('cas_changePasswordURL', ''));
      }
      break;

    case 'user_register':
      if (!user_access('administer users') && variable_get('cas_registerURL', '') != '') {
        drupal_goto(variable_get('cas_registerURL', ''));
      }
      break;
  }
}

/**
 * Login form _validate hook
 */
function cas_login_submit(&$form, &$form_state) {
  if (!empty($form_state['values']['persistent_login'])) {
    $_SESSION['cas_remember'] = 1;
  }
  unset($_GET['destination']);
  //$_REQUEST['destination'] = 'cas';
  $form_state['redirect'] = 'cas';
  // drupal_set_message('Custom submit handler: <pre>'.print_r($form_state,1). '</pre>' );
  drupal_redirect_form($form_state);
}

function _cas_single_sign_out_check() {
  if (variable_get('cas_signout', FALSE) && array_key_exists("logoutRequest", $_POST)) {
    $cas_logout_request_xml_string = utf8_encode($_POST["logoutRequest"]);     // it's important!
    $cas_logout_request_xml = new SimpleXMLElement($cas_logout_request_xml_string);
    if (is_object($cas_logout_request_xml)) {
      $namespaces = $cas_logout_request_xml->getNameSpaces();
      $xsearch = 'SessionIndex';
      if (isset($namespaces['samlp'])) {
        $cas_logout_request_xml->registerXPathNamespace('samlp', $namespaces['samlp']);
        $xsearch = 'samlp:SessionIndex';
      }
      $cas_session_indexes = $cas_logout_request_xml->xpath($xsearch);
      if ($cas_session_indexes) {
        $cas_session_index = (string)$cas_session_indexes[0];
        // Log them out now.
        // first lets find out who we want to log off

        $result = db_query_range("SELECT cld.uid FROM {cas_login_data} cld WHERE cld.cas_session_id = :ticket", 0 , 1, array(':ticket' => $cas_session_index));
        foreach ($result as $record) {
            $uid = $record->uid;
            $acct = user_load($uid);
            watchdog('user', 'Session closed for %name.', array('%name' => $acct->name));
            // remove all entry for user id in cas_login_data
            db_delete('cas_login_data')
              ->condition('uid', $uid)
              ->execute();

            // remove their session
            db_delete('sessions')
              ->condition('uid', $uid)
              ->execute();
        }
      }
    }
  }
}

/**
 * Return the current cas user based on sessioin variables
 *
 */
function cas_current_user() {
  return isset($_SESSION['phpCAS']['user']) ? $_SESSION['phpCAS']['user'] : FALSE;
}

/**
 * Determine whether the current user is an "external" cas user.
 * When settings are set to use drupal as the user repository, then this
 * function will always return true.
 *
 * @return unknown
 */
function cas_is_external_user() {
  if (variable_get('cas_authmap', CAS_AUTHMAP_EXTERNAL) == CAS_AUTHMAP_EXTERNAL) {
    return cas_current_user() !== FALSE;
  }
  else {
    return TRUE;
  }
}


function _cas_single_sign_out_save_token($user) {
  // Ok lets save the CAS service ticket to DB so
  // we can handle CAS logoutRequests when they come
  if ($user->uid && $user->uid > 0 && !empty($_SESSION['cas_ticket'])) {
    db_insert('cas_login_data')
      ->fields(array(
        'cas_session_id' => $_SESSION['cas_ticket'],
        'uid' => $user->uid,
        ))
      ->execute();
    unset($_SESSION['cas_ticket']);
  }
}

/**
 * Make sure that we persist ticket because of redirects performed by CAS.
 *
 */
function _cas_single_sign_out_save_ticket() {
  if (isset($_GET['ticket'])) {
    $_SESSION['cas_ticket'] = $_GET['ticket'];
  }
}

/**
 * Determine whether a CAS user is blocked.
 *
 * @param $cas_name
 *   The CAS username.
 *
 * @return
 *   Boolean TRUE if the user is blocked, FALSE if the user is active.
 */
function _cas_external_user_is_blocked($cas_name) {
  return db_query("SELECT name FROM {users} u JOIN {cas_user} c ON u.uid = c.uid WHERE u.status = 0 AND c.cas_name = :cas_name", array(':cas_name' => $cas_name))->fetchField();
}

/**
 * Roles which should be granted to all CAS users.
 *
 * @return
 *   An associative array with the role id as the key and the role name as value.
 */
function cas_roles() {
  $cas_roles = &drupal_static(__FUNCTION__);
  if (!isset($cas_roles)) {
    $cas_roles = array_intersect_key(user_roles(), variable_get('cas_auto_assigned_role', array(DRUPAL_AUTHENTICATED_RID)));
  }
  return $cas_roles;
}

/**
 * Register a CAS user with some default values.
 *
 * @param $cas_name
 *   The name of the CAS user.
 *
 * @return
 *   The user object of the created user.
 */
function cas_user_register($cas_name) {
  $edit = array(
    'name' => $cas_name,
    'pass' => user_password(),
    'init' => $cas_name,
    'mail' => '',
    'status' => 1,
    'roles' => cas_roles(),
    'cas_name' => $cas_name,
  );
  $cas_domain = (string) variable_get('cas_domain', '');
  if ($cas_domain) {
    $edit['mail'] = $cas_name . '@' . $cas_domain;
  }
  // now save the user and become the new user.
  $account = user_save(drupal_anonymous_user(), $edit);
  watchdog("user", 'new user: %n (CAS)', array('%n' => $account->name), WATCHDOG_NOTICE, l(t("edit user"), "admin/user/edit/$account->uid"));

  return $account;
}
